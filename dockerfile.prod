# Etapa de Dependencias - as deps significa que toda la etapa de conocerá como deps
FROM node:21-alpine3.19 as deps

WORKDIR /usr/src/app

COPY package*.json ./

RUN npm install

# Etapa del Builder - Se construye la aplicación, usualmente para indicar que viene una nueva etapa se hace referencia a una nueva imagen, por eso de nuevo se escribe FROM node:21...
FROM node:21-alpine3.19 as build

WORKDIR /usr/src/app

# Copiar de deps los módulos de node
COPY --from=deps /usr/src/app/node_modules ./node_modules

# Copiar todo el código fuente de la aplicación
COPY . .

RUN npm run build

# Limpiamos todos los módulos de node que no se necesitan, solo se dejan los de producción para reducir el peso
RUN npm ci -f --only=production && npm cache clean --force

RUN npx prisma generate

# Etapa de creación - Se crea la imagen final de docker
FROM node:21-alpine3.19 as prod

WORKDIR /usr/src/app

COPY --from=build /usr/src/app/node_modules ./node_modules

COPY --from=build /usr/src/app/dist ./dist
COPY --from=build /usr/src/app/prisma ./prisma

# Creamos una variable de entorno para indicar que estamos en producción
ENV NODE_ENV=production

# Creamos un usuario que se llame Node y nos movemos a él, es coveniente porque el usuario original tiene demasiado privilegio, entonces creamos uno que solo tenga permiso de ejecución
USER node

EXPOSE 3000

# Ejecutamos la aplicación con node dist/main.js
CMD ["node", "dist/main.js"]